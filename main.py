import os
import json
import logging
import random
import sys
from datetime import time
from zoneinfo import ZoneInfo

import httpx
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (Application, ApplicationBuilder, CommandHandler,
                          ContextTypes )

# --- CONFIGURA√á√ÉO INICIAL ---

# Configura o logging para nos ajudar a ver o que est√° acontecendo
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Pega os tokens do ambiente. Essencial para a seguran√ßa.
TOKEN_TELEGRAM = os.getenv("TOKEN_TELEGRAM")
API_HG = os.getenv("API_HG")

# Define o caminho do arquivo de dados. Usamos /app/data/ por causa do volume persistente na Fly.io
ARQUIVO_DADOS = '/app/data/usuarios.json'

# Define o fuso hor√°rio de Bras√≠lia para os alertas
TZ_BRASILIA = ZoneInfo("America/Sao_Paulo")

# --- DICION√ÅRIO DE FRASES ---
# Centraliza todas as respostas do bot para f√°cil customiza√ß√£o.
FRASES = {
    "start": (
        "Ol√°! üëã Sou o **Cool Climate Bot**, seu assistente de tempo pessoal.\n\n"
        "Comigo, voc√™ nunca mais ser√° pego de surpresa por uma chuva ou por uma onda de calor! üî•\n\n"
        "**O que eu posso fazer por voc√™?**\n\n"
        "üå¶Ô∏è **/clima `[cidade]`**: Consulta a previs√£o do tempo para qualquer cidade na hora. Ex: `/clima S√£o Paulo, SP`\n\n"
        "üìç **/setdaily `[cidade]`**: Define ou atualiza sua cidade padr√£o para receber os alertas. Ex: `/setdaily Rio de Janeiro, RJ`\n\n"
        "‚è∞ **/daily**: Ativa ou desativa os alertas di√°rios autom√°ticos (√†s 06:30 e 20:30).\n\n"
        "‚òî **/alertachuva**: Ativa ou desativa os alertas de chuva para as pr√≥ximas horas.\n\n"
        "üëï **/lookdodia**: Sugere um look com base no clima da sua cidade salva.\n\n"
        "Comece definindo sua cidade com `/setdaily` e ativando os alertas com `/daily`!"
    ),
    "erro_api": [
        "Ops, meu servi√ßo de meteorologia parece estar fora do ar. ‚õàÔ∏è Tente novamente em alguns instantes.",
        "N√£o consegui contato com a central do tempo. Pode tentar de novo daqui a pouco?",
        "Parece que os sat√©lites est√£o de folga. üõ∞Ô∏è Por favor, tente mais tarde.",
    ],
    "cidade_nao_encontrada": [
        "Hmm, n√£o encontrei essa cidade. üßê Ser√° que o nome est√° certinho? Tente o formato `Cidade, UF`.",
        "Essa cidade n√£o apareceu no meu mapa. Pode conferir se digitou corretamente?",
        "N√£o achei essa cidade. Tenta de novo, talvez com o nome do estado junto para me ajudar.",
    ],
    "cidade_nao_definida": [
        "Parece que voc√™ ainda n√£o me disse qual √© a sua cidade. ü§î",
        "Qual cidade voc√™ quer que eu monitore? Me diga usando o comando `/setdaily`.",
        "Primeiro, preciso saber sua cidade. Use `/setdaily Cidade, UF` para configurar.",
    ],
    "setdaily_sucesso": [
        "Show! Sua cidade foi definida como **{cidade}**. ‚úÖ\nAgora voc√™ j√° pode usar os comandos `/daily`, `/alertachuva` e `/lookdodia`!",
        "Anotado! Vou ficar de olho no tempo em **{cidade}**. üëÄ\nLembre-se de ativar os alertas com `/daily` se quiser.",
        "Tudo certo! **{cidade}** agora √© sua cidade padr√£o. O que vamos fazer agora?",
    ],
    "daily_ativado": [
        "Pode deixar! Alertas di√°rios ativados para **{cidade}**. üå§Ô∏è Voc√™ receber√° a previs√£o √†s 06:30 e 20:30 (Hor√°rio de Bras√≠lia). Para desativar, envie /daily de novo.",
        "Combinado! Vou te mandar a previs√£o para **{cidade}** todos os dias de manh√£ e √† noite. Se mudar de ideia, √© s√≥ usar /daily novamente.",
    ],
    "daily_desativado": [
        "Ok, alertas di√°rios desativados. Sem mais mensagens autom√°ticas. Se sentir saudades, j√° sabe o que fazer! üòâ",
        "Tudo bem, desativei os alertas di√°rios. Quando quiser reativar, √© s√≥ me chamar com /daily.",
    ],
    "alertachuva_ativado": [
        "Beleza! Alertas de chuva ativados para **{cidade}**. ‚òî Se uma chuva forte estiver a caminho, eu te aviso! Para cancelar, use /alertachuva de novo.",
        "Ativado! Vou monitorar o c√©u de **{cidade}** para voc√™. Se precisar de guarda-chuva, eu te dou um toque. Para desativar, √© s√≥ usar /alertachuva.",
    ],
    "alertachuva_desativado": [
        "Ok, alertas de chuva desativados. Voc√™ est√° por conta pr√≥pria agora! üòâ Brincadeira, se precisar, √© s√≥ reativar.",
        "Certo, parei de monitorar a chuva para voc√™. Se mudar de ideia, o comando /alertachuva est√° a√≠.",
    ],
    "ajuda_setdaily_primeiro": [
        "Opa, para usar este comando, primeiro preciso saber sua cidade. Use `/setdaily Cidade, UF` para configurar. üëç",
        "Calma l√°! Antes, me diga qual sua cidade padr√£o com o comando `/setdaily`.",
    ],
    "look_quente": [
        "Hoje o dia pede roupas leves! Pense em camisetas, regatas, shorts, saias e vestidos. E n√£o esque√ßa o protetor solar! ‚òÄÔ∏èüòé",
        "Calor√£o √† vista! A dica √©: tecidos leves e cores claras. Bermudas e sand√°lias s√£o seus melhores amigos hoje. Hidrate-se! üíß",
    ],
    "look_frio": [
        "Brrr! Melhor tirar os casacos do arm√°rio. Uma boa blusa, cal√ßa comprida e talvez uma jaqueta ou moletom s√£o essenciais. üß•üß£",
        "O friozinho chegou! Hora de usar camadas: uma camiseta, um su√©ter por cima e, se precisar, um casaco mais pesado. Mantenha-se aquecido! ‚òï",
    ],
    "look_ameno": [
        "Hoje o tempo est√° perfeito! Uma cal√ßa jeans com uma camiseta ou camisa de manga comprida √© uma √≥tima pedida. Um casaquinho leve pode ser √∫til √† noite. üòâ",
        "Clima super agrad√°vel! V√° com seu look casual favorito. Uma jaqueta jeans ou um cardig√£ s√£o √≥timos para ter √† m√£o, s√≥ por garantia.",
    ],
    "saudacao_manha": [
        "Bom dia! ‚òÄÔ∏è Que tal come√ßar o dia com a previs√£o do tempo?",
        "Levanta e anda, que o dia j√° come√ßou! ‚ú® Confira o clima de hoje:",
        "Bom dia, flor do dia! üå∏ Preparei a previs√£o para voc√™:",
        "Aquele cheirinho de caf√© no ar... ‚òï Bom dia! Aqui est√° o seu resumo do tempo:",
        "Ei, bom dia! Espero que tenha dormido bem. üòä Olha s√≥ como o tempo est√° hoje:",
    ],
    "saudacao_noite": [
        "Boa noite! üò¥ Hora de descansar, mas antes, veja a previs√£o para amanh√£:",
        "Chegou a hora de recarregar as energias! üîã Tenha uma √≥tima noite! Segue o clima para amanh√£:",
        "As estrelas j√° est√£o no c√©u... ‚ú® Boa noite! Preparei a previs√£o para o seu descanso:",
        "Boa noite! Durma bem e sonhe com os anjinhos. üòá Ah, e aqui est√° o tempo para amanh√£:",
        "Miss√£o cumprida por hoje! üí™ Tenha uma excelente noite de sono! A previs√£o de amanh√£ √©:",
    ],
}

# --- FUN√á√ïES DE DADOS ---

def carregar_dados():
    """Carrega os dados dos usu√°rios do arquivo JSON."""
    if not os.path.exists(ARQUIVO_DADOS):
        # Se o arquivo n√£o existe, cria um diret√≥rio e um arquivo vazio
        os.makedirs(os.path.dirname(ARQUIVO_DADOS), exist_ok=True)
        with open(ARQUIVO_DADOS, 'w') as f:
            json.dump({}, f)
        return {}
    try:
        with open(ARQUIVO_DADOS, 'r') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

def salvar_dados(dados):
    """Salva os dados dos usu√°rios no arquivo JSON."""
    with open(ARQUIVO_DADOS, 'w') as f:
        json.dump(dados, f, indent=4)

# --- FUN√á√ïES DE L√ìGICA PRINCIPAL ---

async def obter_clima_atual(cidade: str):
    """Busca os dados de clima na API da HG Brasil."""
    url = f"https://api.hgbrasil.com/weather?key={API_HG}&city_name={cidade}"
    try:
        async with httpx.AsyncClient( ) as client:
            resposta = await client.get(url, timeout=10.0)
            resposta.raise_for_status()
            return resposta.json()
    except httpx.RequestError as exc:
        logger.error(f"Erro de rede ao chamar a API: {exc}" )
        return {"error": "api_error"}
    except Exception as exc:
        logger.error(f"Erro inesperado ao processar a API: {exc}")
        return {"error": "unknown_error"}

def gerar_lookdodia(clima: dict):
    """Gera uma sugest√£o de look com base na temperatura."""
    temp = clima.get('temp')
    if temp >= 25:
        return random.choice(FRASES["look_quente"])
    elif temp <= 17:
        return random.choice(FRASES["look_frio"])
    else:
        return random.choice(FRASES["look_ameno"])

def formatar_previsao(dados_clima: dict, incluir_lookdodia: bool = False):
    """Formata a resposta da API em um texto amig√°vel."""
    results = dados_clima.get('results', {})
    if not results:
        return None

    cidade = results.get('city_name', 'N/A')
    temp = results.get('temp', 'N/A')
    descricao = results.get('description', 'N/A')
    umidade = results.get('humidity', 'N/A')
    nascer_sol = results.get('sunrise', 'N/A')
    por_sol = results.get('sunset', 'N/A')
    velocidade_vento = results.get('wind_speedy', 'N/A')
    
    previsao_hoje = results.get('forecast', [{}])[0]
    max_temp = previsao_hoje.get('max', 'N/A')
    min_temp = previsao_hoje.get('min', 'N/A')
    prob_chuva = previsao_hoje.get('rain_probability', 0)

    texto = (
        f"üìç *{cidade}*\n"
        f"üå°Ô∏è Agora: *{temp}¬∞C* - {descricao}\n"
        f"üî∫ M√°x: {max_temp}¬∞C | üîª M√≠n: {min_temp}¬∞C\n"
        f"üíß Umidade: {umidade}%\n"
        f"üí® Vento: {velocidade_vento}\n"
        f"üåÖ Nascer do Sol: {nascer_sol} | üåá P√¥r do Sol: {por_sol}"
    )

    if prob_chuva > 60:
        texto += f"\n\n‚ö†Ô∏è *Alerta de Chuva: {prob_chuva}% de chance.*\n_√â bom levar o guarda-chuva! ‚òÇÔ∏è_"

    if incluir_lookdodia:
        look = gerar_lookdodia(results)
        texto += f"\n\nüëï *Look do Dia:* {look}"

    return texto

# --- FUN√á√ïES DE COMANDOS DO TELEGRAM ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia a mensagem de boas-vindas."""
    await update.message.reply_text(FRASES["start"], parse_mode="Markdown")

async def clima(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Busca e exibe o clima para uma cidade informada."""
    if not context.args:
        await update.message.reply_text("Uso: `/clima nome da cidade, uf`", parse_mode="Markdown")
        return

    cidade_usuario = " ".join(context.args)
    dados_clima = await obter_clima_atual(cidade_usuario)

    if dados_clima.get("error"):
        await update.message.reply_text(random.choice(FRASES["erro_api"]))
        return

    texto_previsao = formatar_previsao(dados_clima)
    if texto_previsao:
        await update.message.reply_text(texto_previsao, parse_mode="Markdown")
    else:
        await update.message.reply_text(random.choice(FRASES["cidade_nao_encontrada"]))

async def setdaily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Define a cidade padr√£o do usu√°rio."""
    chat_id = str(update.effective_chat.id)
    if not context.args:
        await update.message.reply_text("Uso: `/setdaily nome da cidade, uf`", parse_mode="Markdown")
        return

    cidade_usuario = " ".join(context.args)
    dados_clima = await obter_clima_atual(cidade_usuario)
    results = dados_clima.get('results')

    if not results:
        await update.message.reply_text(random.choice(FRASES["cidade_nao_encontrada"]))
        return

    cidade_correta = results['city_name']
    dados = carregar_dados()
    if chat_id not in dados:
        dados[chat_id] = {}
    
    dados[chat_id]["cidade"] = cidade_correta
    salvar_dados(dados)
    
    resposta = random.choice(FRASES["setdaily_sucesso"]).format(cidade=cidade_correta)
    await update.message.reply_text(resposta, parse_mode="Markdown")

async def lookdodia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia uma sugest√£o de look com base no clima da cidade salva."""
    chat_id = str(update.effective_chat.id)
    dados = carregar_dados()

    if chat_id not in dados or "cidade" not in dados[chat_id]:
        await update.message.reply_text(random.choice(FRASES["ajuda_setdaily_primeiro"]))
        return

    cidade = dados[chat_id]["cidade"]
    dados_clima = await obter_clima_atual(cidade)
    results = dados_clima.get('results')

    if results:
        look = gerar_lookdodia(results)
        await update.message.reply_text(f"üëï Para o clima de hoje em *{cidade}*, a sugest√£o √©:\n\n_{look}_", parse_mode="Markdown")
    else:
        await update.message.reply_text(random.choice(FRASES["erro_api"]))

# --- FUN√á√ïES DE TAREFAS AGENDADAS (JOBS) ---

async def enviar_previsao_diaria(context: ContextTypes.DEFAULT_TYPE):
    """Fun√ß√£o executada pelo JobQueue para enviar os alertas di√°rios."""
    job = context.job
    chat_id = str(job.chat_id)
    tipo_alerta = job.data.get("tipo", "manha")

    dados = carregar_dados()
    if chat_id not in dados or not dados[chat_id].get("daily_on", False):
        logger.warning(f"Job di√°rio executado para usu√°rio inativo ou sem dados: {chat_id}. Removendo job.")
        job.schedule_removal()
        return

    cidade = dados[chat_id]["cidade"]
    dados_clima = await obter_clima_atual(cidade)
    
    if dados_clima.get("error"):
        logger.error(f"N√£o foi poss√≠vel obter clima para job di√°rio do chat {chat_id}")
        return

    texto_previsao = formatar_previsao(dados_clima, incluir_lookdodia=True)
    if texto_previsao:
        if tipo_alerta == "manha":
            saudacao = random.choice(FRASES["saudacao_manha"])
        else:  # noite
            saudacao = random.choice(FRASES["saudacao_noite"])
        
        mensagem_final = f"{saudacao}\n\n{texto_previsao}"
        
        await context.bot.send_message(chat_id=job.chat_id, text=mensagem_final, parse_mode="Markdown")

async def verificar_chuva(context: ContextTypes.DEFAULT_TYPE):
    """Verifica periodicamente se h√° previs√£o de chuva."""
    job = context.job
    chat_id = str(job.chat_id)

    dados = carregar_dados()
    if chat_id not in dados or not dados[chat_id].get("rain_on", False):
        logger.warning(f"Job de chuva executado para usu√°rio inativo: {chat_id}. Removendo job.")
        job.schedule_removal()
        return

    cidade = dados[chat_id]["cidade"]
    dados_clima = await obter_clima_atual(cidade)
    results = dados_clima.get('results', {})
    previsao_hoje = results.get('forecast', [{}])[0]
    prob_chuva = previsao_hoje.get('rain_probability', 0)

    if prob_chuva > 70:
        # Para evitar spam, s√≥ enviamos o alerta uma vez
        if not dados[chat_id].get("rain_alert_sent", False):
            await context.bot.send_message(
                chat_id=job.chat_id,
                text=f"‚òî *Alerta de Chuva para as Pr√≥ximas Horas em {cidade}!* ({prob_chuva}%)\n\n√â melhor se preparar!"
            )
            dados[chat_id]["rain_alert_sent"] = True
            salvar_dados(dados)
    else:
        # Reseta o status do alerta se a chance de chuva diminuir
        if dados[chat_id].get("rain_alert_sent", False):
            dados[chat_id]["rain_alert_sent"] = False
            salvar_dados(dados)

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ativa ou desativa os alertas di√°rios."""
    chat_id = str(update.effective_chat.id)
    dados = carregar_dados()

    if chat_id not in dados or "cidade" not in dados[chat_id]:
        await update.message.reply_text(random.choice(FRASES["ajuda_setdaily_primeiro"]))
        return

    cidade = dados[chat_id]["cidade"]
    jobs_existentes = context.job_queue.get_jobs_by_name(chat_id)
    
    if jobs_existentes:
        for job in jobs_existentes:
            if job.data.get("type") == "daily":
                job.schedule_removal()
        dados[chat_id]["daily_on"] = False
        await update.message.reply_text(random.choice(FRASES["daily_desativado"]))
    else:
        context.job_queue.run_daily(enviar_previsao_diaria, time(hour=6, minute=30, tzinfo=TZ_BRASILIA), name=chat_id, chat_id=update.effective_chat.id, data={"type": "daily", "tipo": "manha"})
        context.job_queue.run_daily(enviar_previsao_diaria, time(hour=20, minute=30, tzinfo=TZ_BRASILIA), name=chat_id, chat_id=update.effective_chat.id, data={"type": "daily", "tipo": "noite"})
        dados[chat_id]["daily_on"] = True
        resposta = random.choice(FRASES["daily_ativado"]).format(cidade=cidade)
        await update.message.reply_text(resposta)
    
    salvar_dados(dados)

async def alertachuva(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ativa ou desativa os alertas de chuva."""
    chat_id = str(update.effective_chat.id)
    dados = carregar_dados()

    if chat_id not in dados or "cidade" not in dados[chat_id]:
        await update.message.reply_text(random.choice(FRASES["ajuda_setdaily_primeiro"]))
        return

    cidade = dados[chat_id]["cidade"]
    jobs_existentes = context.job_queue.get_jobs_by_name(chat_id)

    job_encontrado = None
    for job in jobs_existentes:
        if job.data.get("type") == "rain":
            job_encontrado = job
            break

    if job_encontrado:
        job_encontrado.schedule_removal()
        dados[chat_id]["rain_on"] = False
        await update.message.reply_text(random.choice(FRASES["alertachuva_desativado"]))
    else:
        context.job_queue.run_repeating(verificar_chuva, interval=3600, first=10, name=chat_id, chat_id=update.effective_chat.id, data={"type": "rain"})
        dados[chat_id]["rain_on"] = True
        resposta = random.choice(FRASES["alertachuva_ativado"]).format(cidade=cidade)
        await update.message.reply_text(resposta)

    salvar_dados(dados)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """Loga os erros causados pelos updates."""
    logger.error(f"Exce√ß√£o ao processar um update: {context.error}", exc_info=context.error)

# --- FUN√á√ÉO PRINCIPAL ---

def main():
    """Fun√ß√£o principal que inicia e roda o bot."""
    logger.info("Iniciando o bot...")

    # Verifica√ß√£o de seguran√ßa para garantir que os tokens foram carregados
    if not TOKEN_TELEGRAM or not API_HG:
        logger.critical("ERRO: Vari√°veis de ambiente TOKEN_TELEGRAM e API_HG n√£o definidas.")
        sys.exit("Tokens n√£o encontrados. Encerrando.")

    # Constr√≥i a aplica√ß√£o do bot
    app = ApplicationBuilder().token(TOKEN_TELEGRAM).build()

    # Registra os handlers dos comandos
    app.add_error_handler(error_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("clima", clima))
    app.add_handler(CommandHandler("setdaily", setdaily))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("alertachuva", alertachuva))
    app.add_handler(CommandHandler("lookdodia", lookdodia))

    logger.info("‚úÖ Bot rodando. Pressione Ctrl+C para parar.")
    
    # Inicia o bot para receber atualiza√ß√µes
    app.run_polling()

if __name__ == '__main__':
    main()
